#!/usr/bin/env python
# coding: utf-8

# In[11]:


import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import cufflinks as cf
cf.go_offline()
get_ipython().run_line_magic('matplotlib', 'inline')


# In[2]:


train = pd.read_csv('titanic_train.csv')
train.head()


# See the missing values


sns.heatmap(train.isnull(),yticklabels= False, cbar= False, cmap = 'viridis')
sns.set_style('whitegrid')
# See the survived column with sex difference
sns.countplot(x='Survived',hue = 'Sex',data = train)

# Survived columns on class difference
sns.countplot(x='Survived',hue = 'Pclass',data = train)

# General age effect on data
sns.distplot(train['Age'].dropna(), kde = False, bins = 30)

# Number of Siblings or Dependents for every person
sns.countplot(x='SibSp', data = train)


# In[25]:


plt.rcParams['figure.figsize']=(10,10)
sns.distplot(train['Fare'], kde = False)


# In[4]:


train['Fare'].iplot(kind='hist',bins=50)


# In[14]:


# Data Cleaning TIme
plt.figure(figsize=(10,7))
sns.boxplot(x='Pclass',y='Age', data=train)
sns.set_style('whitegrid')


# In[16]:


def getage(columns):
    Age = columns[0]
    Pclass = columns[1]
    
    if pd.isnull(Age):
        
        if Pclass == 1:
            return 37
        elif Pclass == 2:
            return 29
        else: 
            return 24
    else:
        return Age
    
    
train['Age'] = train[['Age','Pclass']].apply(getage, axis = 1)


# In[24]:


sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')


# In[21]:


train.drop('Cabin',axis=1,inplace=True)


# In[23]:


train.dropna(inplace=True)


# In[28]:


train['Sex']


# In[29]:


embark = pd.get_dummies(train['Embarked'],drop_first=True)


# In[32]:


train = pd.concat([train,embark],axis=1)


# In[34]:


train.drop(['Embarked','Name','Ticket'],axis=1,inplace=True)


# In[35]:


train.drop('PassengerId',axis=1,inplace=True)


# In[36]:


train.head()


# In[37]:


Pclass = pd.get_dummies(train['Pclass'],drop_first=True)


# In[39]:


Pclass.tail()


# In[41]:


X = train.drop('Survived',axis=1)
y = train['Survived']

from sklearn.model_selection import train_test_split


# In[42]:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)


# In[43]:


from sklearn.linear_model import LogisticRegression


# In[44]:


logmodel = LogisticRegression()


# In[45]:


logmodel.fit(X_train,y_train)


# In[46]:


predictions = logmodel.predict(X_test)


# In[47]:


from sklearn.metrics import classification_report


# In[48]:


print(classification_report(y_test,predictions))


# In[49]:


from sklearn.metrics import confusion_matrix



# To see model fit on False & Positive Calls

confusion_matrix(y_test,predictions)



